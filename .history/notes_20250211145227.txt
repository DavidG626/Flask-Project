@dashboard_bp.route('/update_medical_history/<int:patient_id>', methods=['GET', 'POST'])
@login_required
@check_session_timeout
def update_medical_history(patient_id):
    patient = Patient.query.get_or_404(patient_id)
    
    # Verify this patient belongs to the current provider
    if (patient.provider_first_name != current_user.first_name or 
        patient.provider_last_name != current_user.last_name):
        flash('You do not have permission to edit this patient.', 'error')
        return redirect(url_for('dashboard.my_patients'))
    
    # Get patient's existing diagnoses
    patient_diagnoses = PatientDiagnosis.query.filter_by(patient_id=patient.id).all()
    diagnoses_details = []
    for diag in patient_diagnoses:
        icd10_code = ICD10Code.query.get(diag.icd10_code_id)  # Changed from icd10_id
        if icd10_code:
            diagnoses_details.append(icd10_code)
            
    # Get ICD10 codes for dropdown
    search_term = request.args.get('search', '')
    if search_term:
        icd10_codes = ICD10Code.query.filter(
            (ICD10Code.code.ilike(f'%{search_term}%')) |
            (ICD10Code.description.ilike(f'%{search_term}%'))
        ).limit(10).all()
    else:
        icd10_codes = ICD10Code.query.order_by(ICD10Code.code).limit(50).all()
    
    if request.method == 'POST':
        try:
            # Create medical history if it doesn't exist
            if not patient.medical_history:
                medical_history = PastMedicalHistory(patient_id=patient.id)
                db.session.add(medical_history)
                db.session.commit()
            else:
                medical_history = patient.medical_history

            # Handle diagnoses
            new_diagnoses = request.form.getlist('diagnoses')
            if new_diagnoses:
                # Only clear and update if new diagnoses are provided
                for diagnosis in patient.diagnoses:
                    db.session.delete(diagnosis)
                
                for diagnosis_id in new_diagnoses:
                    if diagnosis_id:
                        new_diagnosis = PatientDiagnosis(
                            patient_id=patient.id,
                            icd10_id=int(diagnosis_id)
                        )
                        db.session.add(new_diagnosis)

            # Handle allergies
            new_allergies = []
            for i in range(1, 16):
                allergy_name = request.form.get(f'allergy_{i}')
                severity = request.form.get(f'allergy_severity_{i}')
                reaction = request.form.get(f'allergy_reaction_{i}')
                
                if allergy_name and allergy_name.strip():
                    new_allergies.append({
                        'name': allergy_name.strip(),
                        'severity': severity.strip() if severity else None,
                        'reaction': reaction.strip() if reaction else None
                    })
            
            if new_allergies:
                medical_history.allergies.clear()
                for allergy_data in new_allergies:
                    allergy = Allergy(
                        medical_history_id=medical_history.id,
                        allergy_name=allergy_data['name'],
                        allergy_severity=allergy_data['severity'],
                        reaction=allergy_data['reaction']
                    )
                    db.session.add(allergy)

            # Handle medical conditions
            new_conditions = []
            for i in range(1, 11):
                condition_name = request.form.get(f'condition_{i}')
                if condition_name and condition_name.strip():
                    new_conditions.append(condition_name.strip())
            
            if new_conditions:
                medical_history.medical_conditions.clear()
                for condition_name in new_conditions:
                    condition = MedicalCondition(
                        medical_history_id=medical_history.id,
                        condition_name=condition_name
                    )
                    db.session.add(condition)

            # Handle surgeries
            new_surgeries = []
            for i in range(1, 11):
                surgery_name = request.form.get(f'surgery_{i}')
                surgery_date = request.form.get(f'surgery_date_{i}')
                
                if surgery_name and surgery_name.strip():
                    new_surgeries.append({
                        'name': surgery_name.strip(),
                        'date': datetime.strptime(surgery_date, '%Y-%m-%d') if surgery_date else None
                    })
            
            if new_surgeries:
                medical_history.surgeries.clear()
                for surgery_data in new_surgeries:
                    surgery = Surgery(
                        medical_history_id=medical_history.id,
                        surgery_name=surgery_data['name'],
                        surgery_date=surgery_data['date']
                    )
                    db.session.add(surgery)

            # Handle medications
            new_medications = []
            for i in range(1, 11):
                med_name = request.form.get(f'medication_{i}')
                dosage = request.form.get(f'dosage_{i}')
                frequency = request.form.get(f'frequency_{i}')
                
                if med_name and med_name.strip():
                    new_medications.append({
                        'name': med_name.strip(),
                        'dosage': dosage.strip() if dosage else None,
                        'frequency': frequency.strip() if frequency else None
                    })
            
            if new_medications:
                medical_history.medications.clear()
                for med_data in new_medications:
                    medication = Medication(
                        medical_history_id=medical_history.id,
                        medication_name=med_data['name'],
                        dosage=med_data['dosage'],
                        frequency=med_data['frequency']
                    )
                    db.session.add(medication)

            # Update smoking history
            medical_history.current_smoker = 'current_smoker' in request.form
            medical_history.former_smoker = 'former_smoker' in request.form
            medical_history.never_smoker = 'never_smoker' in request.form
            medical_history.passive_smoker = 'passive_smoker' in request.form
            medical_history.vaping = 'vaping' in request.form
            
            # Update quit date if former smoker
            quit_date = request.form.get('quit_date')
            if quit_date:
                medical_history.quit_date = datetime.strptime(quit_date, '%Y-%m-%d')

            # Update alcohol intake
            medical_history.wine_per_week = request.form.get('wine_per_week', type=int)
            medical_history.beer_per_week = request.form.get('beer_per_week', type=int)
            medical_history.liquor_per_week = request.form.get('liquor_per_week', type=int)

            # Update substance use
            medical_history.marijuana = 'marijuana' in request.form
            medical_history.cocaine = 'cocaine' in request.form
            medical_history.meth = 'meth' in request.form
            medical_history.iv_drugs = 'iv_drugs' in request.form

            db.session.commit()
            flash('Medical history has been updated successfully!', 'success')
            return redirect(url_for('dashboard.patient_medical_history', patient_id=patient_id))
        
        except Exception as e:
            db.session.rollback()
            flash('An error occurred while updating medical history.', 'error')
            return redirect(url_for('dashboard.patient_medical_history', patient_id=patient_id))
    
    return render_template('update_medical_hx.html',
                         patient=patient, 
                         patient_diagnoses=diagnoses_details,
                         icd10_codes=icd10_codes)
